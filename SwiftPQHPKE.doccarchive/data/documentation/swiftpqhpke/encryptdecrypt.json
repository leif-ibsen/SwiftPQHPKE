{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/EncryptDecrypt"},"kind":"article","abstract":[{"text":"Encrypt and decrypt one or more messages","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"","type":"heading","text":"","level":2},{"anchor":"Stateless-Single-shot-API","type":"heading","text":"Stateless Single-shot API","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"CipherSuite"},{"type":"text","text":" instance can encrypt (seal) a single plaintext message and decrypt (open) a single"},{"type":"text","text":" "},{"type":"text","text":"ciphertext message without the need for a "},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" instance and a "},{"type":"codeVoice","code":"Recipient"},{"type":"text","text":" instance."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"syntax":"swift","code":["\/\/ Encryption and decryption of a single message in base mode","","import SwiftPQHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .ML512, kdf: .KDF256, aead: .AESGCM256)","","\/\/ The recipient keys","let (recipientPub, recipientPriv) = theSuite.makeKeyPair()","","let plainText = Bytes(\"Hi, there\".utf8)","let theInfo: Bytes = [1, 2, 3]","let theAad: Bytes = [4, 5, 6]","","\/\/ Generate the ciphertext","let (encapsulatedKey, cipherText) = try theSuite.seal(publicKey: recipientPub, info: theInfo, pt: plainText, aad: theAad)","","\/\/ Decrypt it","let decrypted = try theSuite.open(privateKey: recipientPriv, info: theInfo, ct: cipherText, aad: theAad, encap: encapsulatedKey)","print(String(bytes: decrypted, encoding: .utf8)!)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"giving:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Hi, there"]},{"text":"Stateful Multi-message API","anchor":"Stateful-Multi-message-API","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Sender"},{"type":"text","text":" is based on a specific "},{"code":"CipherSuite","type":"codeVoice"},{"type":"text","text":" and a "},{"code":"Sender","type":"codeVoice"},{"type":"text","text":" instance can encrypt (seal)"},{"type":"text","text":" "},{"type":"text","text":"a sequence of plaintexts."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Recipient"},{"type":"text","text":" is also based on a specific "},{"type":"codeVoice","code":"CipherSuite"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"Recipient"},{"type":"text","text":" instance can decrypt (open)"},{"type":"text","text":" "},{"type":"text","text":"a sequence of ciphertexts."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Encryption and decryption of 3 messages in preshared key mode","","import SwiftPQHPKE","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .ML768, kdf: .KDF384, aead: .CHACHAPOLY)","","let plainText1 = Bytes(\"Hi, there 1\".utf8)","let plainText2 = Bytes(\"Hi, there 2\".utf8)","let plainText3 = Bytes(\"Hi, there 3\".utf8)","","let thePsk: Bytes = [1]","let thePskId: Bytes = [2]","let theInfo: Bytes = [1, 2, 3]","let aad1: Bytes = [4, 5]","let aad2: Bytes = [6, 7]","let aad3: Bytes = [8, 9]","","\/\/ The Recipient keys","let (recipientPub, recipientPriv) = theSuite.makeKeyPair()","","\/\/ Create the Sender instance","let sender = try Sender(suite: theSuite, publicKey: recipientPub, info: theInfo, psk: thePsk, pskId: thePskId)","","\/\/ Generate the ciphertexts","let cipherText1 = try sender.seal(pt: plainText1, aad: aad1)","let cipherText2 = try sender.seal(pt: plainText2, aad: aad2)","let cipherText3 = try sender.seal(pt: plainText3, aad: aad3)","","\/\/ Create the Recipient instance","let recipient = try Recipient(suite: theSuite, privateKey: recipientPriv, info: theInfo, psk: thePsk, pskId: thePskId, encap: sender.encapsulatedKey)","","\/\/ Decrypt the ciphertexts","let decrypted1 = try recipient.open(ct: cipherText1, aad: aad1)","let decrypted2 = try recipient.open(ct: cipherText2, aad: aad2)","let decrypted3 = try recipient.open(ct: cipherText3, aad: aad3)","","print(String(bytes: decrypted1, encoding: .utf8)!)","print(String(bytes: decrypted2, encoding: .utf8)!)","print(String(bytes: decrypted3, encoding: .utf8)!)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"giving:"}]},{"syntax":"swift","type":"codeListing","code":["Hi, there 1","Hi, there 2","Hi, there 3"]},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"The messages must be decrypted in the order in which they were encrypted."}]}],"type":"aside","style":"important"}]}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SwiftPQHPKE"}],"title":"Encryption and Decryption"},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftpqhpke\/encryptdecrypt"]}],"hierarchy":{"paths":[["doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE"]]},"seeAlsoSections":[{"title":"Additional Information","generated":true,"identifiers":["doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/SecretExport","doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/KeyManagement","doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/Performance","doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/References"],"anchor":"Additional-Information"}],"references":{"doc://swiftpqhpke.SwiftPQHPKE/documentation/SwiftPQHPKE":{"identifier":"doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE","title":"SwiftPQHPKE","kind":"symbol","abstract":[{"type":"text","text":"Post-Quantum Hybrid Public Key Encryption"}],"url":"\/documentation\/swiftpqhpke","type":"topic","role":"collection"},"doc://swiftpqhpke.SwiftPQHPKE/documentation/SwiftPQHPKE/KeyManagement":{"kind":"article","identifier":"doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/KeyManagement","role":"article","title":"Key Management","url":"\/documentation\/swiftpqhpke\/keymanagement","type":"topic","abstract":[{"text":"Create new keys and load existing keys","type":"text"}]},"doc://swiftpqhpke.SwiftPQHPKE/documentation/SwiftPQHPKE/References":{"title":"References","type":"topic","identifier":"doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/References","url":"\/documentation\/swiftpqhpke\/references","kind":"article","abstract":[{"type":"text","text":"Algorithms from the following papers have been used in the implementation"}],"role":"article"},"doc://swiftpqhpke.SwiftPQHPKE/documentation/SwiftPQHPKE/Performance":{"url":"\/documentation\/swiftpqhpke\/performance","kind":"article","title":"Performance","type":"topic","identifier":"doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/Performance","abstract":[{"text":"Encryption and decryption speed","type":"text"}],"role":"article"},"doc://swiftpqhpke.SwiftPQHPKE/documentation/SwiftPQHPKE/SecretExport":{"abstract":[{"type":"text","text":"Create secret messages"}],"identifier":"doc:\/\/swiftpqhpke.SwiftPQHPKE\/documentation\/SwiftPQHPKE\/SecretExport","title":"Secret Export","kind":"article","type":"topic","role":"article","url":"\/documentation\/swiftpqhpke\/secretexport"}}}