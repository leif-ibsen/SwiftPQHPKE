{"hierarchy":{"paths":[["doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE"]]},"sections":[],"seeAlsoSections":[{"generated":true,"title":"Additional Information","identifiers":["doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/EncryptDecrypt","doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/KeyManagement","doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/Performance","doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/References"],"anchor":"Additional-Information"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftpqhpke\/secretexport"]}],"metadata":{"roleHeading":"Article","role":"article","title":"Secret Export","modules":[{"name":"SwiftPQHPKE"}]},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/SecretExport"},"abstract":[{"type":"text","text":"Create secret messages"}],"primaryContentSections":[{"content":[{"anchor":"","level":2,"type":"heading","text":""},{"anchor":"Single-Secret-Export","level":3,"type":"heading","text":"Single Secret Export"},{"type":"paragraph","inlineContent":[{"text":"Given the recipient’s public key, a ","type":"text"},{"code":"CipherSuite","type":"codeVoice"},{"text":" instance can generate a secret that only the recipient can know.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Example","type":"text"}],"type":"strong"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Generate secret in base mode","","import SwiftPQHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .ML512, kdf: .KDF256, aead: .EXPORTONLY)","","\/\/ The recipient keys","let (recipientPubKey, recipientPrivKey) = theSuite.makeKeyPair()","","\/\/ Generate the secret","let (encapsulated, secret) = try theSuite.sendExport(publicKey: recipientPubKey, info: [], context: [], L: 10)","print(\"Generated secret:\", secret)","","\/\/ The recipient retrieves the secret by means of the encapsulated key","let retrievedSecret = try theSuite.receiveExport(privateKey: recipientPrivKey, info: [], context: [], L: 10, encap: encapsulated)","print(\"Retrieved secret:\", retrievedSecret)"]},{"type":"paragraph","inlineContent":[{"text":"giving (for example):","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Generated secret: [214, 237, 48, 14, 75, 122, 60, 137, 232, 222]","Retrieved secret: [214, 237, 48, 14, 75, 122, 60, 137, 232, 222]"]},{"anchor":"Multi-secret-Export","level":3,"type":"heading","text":"Multi-secret Export"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the recipient’s public key, a "},{"code":"Sender","type":"codeVoice"},{"type":"text","text":" instance can generate secrets that only the recipient can know."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Example"}],"type":"strong"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Generate 3 secrets in preshared key mode","","import SwiftPQHPKE","","\/\/ The aead need not be .EXPORTONLY, any aead will work","","\/\/ The CipherSuite to use","let theSuite = CipherSuite(kem: .ML512, kdf: .KDF256, aead: .EXPORTONLY)","","let thePsk: Bytes = [1]","let thePskId: Bytes = [2]","let theInfo: Bytes = [1, 2, 3]","","\/\/ The Recipient keys","let (recipientPubKey, recipientPrivKey) = theSuite.makeKeyPair()","","\/\/ Create the Sender instance","let sender = try Sender(suite: theSuite, publicKey: recipientPubKey, info: theInfo, psk: thePsk, pskId: thePskId)","","let ctx1: Bytes = [1]","let ctx2: Bytes = [2]","let ctx3: Bytes = [3]","","\/\/ Generate the secrets","let secret1 = try sender.sendExport(context: ctx1, L: 10)","let secret2 = try sender.sendExport(context: ctx2, L: 10)","let secret3 = try sender.sendExport(context: ctx3, L: 10)","print(\"Generated secret1:\", secret1)","print(\"Generated secret2:\", secret2)","print(\"Generated secret3:\", secret3)","print()","","\/\/ Create the Recipient instance, the recipient retrieves the secrets by means of the encapsulated key","let recipient = try Recipient(suite: theSuite, privateKey: recipientPrivKey, info: theInfo, psk: thePsk, pskId: thePskId, encap: sender.encapsulatedKey)","","\/\/ Retrieve the secrets","let retrievedSecret1 = try recipient.receiveExport(context: ctx1, L: 10)","let retrievedSecret2 = try recipient.receiveExport(context: ctx2, L: 10)","let retrievedSecret3 = try recipient.receiveExport(context: ctx3, L: 10)","print(\"Retrieved secret1:\", retrievedSecret1)","print(\"Retrieved secret2:\", retrievedSecret2)","print(\"Retrieved secret3:\", retrievedSecret3)"]},{"inlineContent":[{"text":"giving (for example):","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Generated secret1: [69, 227, 178, 197, 20, 38, 132, 235, 147, 90]","Generated secret2: [165, 213, 95, 210, 19, 71, 144, 70, 189, 32]","Generated secret3: [98, 6, 38, 67, 130, 142, 230, 207, 1, 128]","","Retrieved secret1: [69, 227, 178, 197, 20, 38, 132, 235, 147, 90]","Retrieved secret2: [165, 213, 95, 210, 19, 71, 144, 70, 189, 32]","Retrieved secret3: [98, 6, 38, 67, 130, 142, 230, 207, 1, 128]"],"syntax":"swift"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://SwiftPQHPKE/documentation/SwiftPQHPKE":{"type":"topic","identifier":"doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE","abstract":[{"type":"text","text":"Post-Quantum Hybrid Public Key Encryption"}],"kind":"symbol","role":"collection","url":"\/documentation\/swiftpqhpke","title":"SwiftPQHPKE"},"doc://SwiftPQHPKE/documentation/SwiftPQHPKE/KeyManagement":{"title":"Key Management","role":"article","identifier":"doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/KeyManagement","url":"\/documentation\/swiftpqhpke\/keymanagement","abstract":[{"type":"text","text":"Create new keys and load existing keys"}],"kind":"article","type":"topic"},"doc://SwiftPQHPKE/documentation/SwiftPQHPKE/EncryptDecrypt":{"kind":"article","title":"Encryption and Decryption","role":"article","abstract":[{"type":"text","text":"Encrypt and decrypt one or more messages"}],"url":"\/documentation\/swiftpqhpke\/encryptdecrypt","type":"topic","identifier":"doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/EncryptDecrypt"},"doc://SwiftPQHPKE/documentation/SwiftPQHPKE/References":{"identifier":"doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/References","role":"article","abstract":[{"type":"text","text":"Algorithms from the following papers have been used in the implementation"}],"url":"\/documentation\/swiftpqhpke\/references","kind":"article","type":"topic","title":"References"},"doc://SwiftPQHPKE/documentation/SwiftPQHPKE/Performance":{"url":"\/documentation\/swiftpqhpke\/performance","abstract":[{"text":"Encryption and decryption speed","type":"text"}],"title":"Performance","role":"article","kind":"article","identifier":"doc:\/\/SwiftPQHPKE\/documentation\/SwiftPQHPKE\/Performance","type":"topic"}}}